@using Microsoft.JSInterop
@inject IJSRuntime JS
@implements IAsyncDisposable

<CascadingValue Value="IsMobile">
    <div @ref="_ref">
        @ChildContent
    </div>
</CascadingValue>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    // ✅ 可选回调参数
    [Parameter] public EventCallback<double> OnResize { get; set; }

    private ElementReference _ref;
    private DotNetObjectReference<ObserverSize>? _dotNetRef;

    public bool IsMobile { get; private set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("responsiveResizeObserver.observe", _dotNetRef, _ref, "ObserverSizeComponent");
        }
    }

    [JSInvokable]
    public async Task OnResizeCallback(double width)
    {
        var newState = width < 768;

        if (newState != IsMobile)
        {
            IsMobile = newState;
            StateHasChanged(); // ✅ 触发 Cascading 更新
        }

        if (OnResize.HasDelegate)
        {
            await OnResize.InvokeAsync(width); // ✅ 可选回调
        }
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync("responsiveResizeObserver.unobserve", "ObserverSizeComponent");
        _dotNetRef?.Dispose();
    }
}
