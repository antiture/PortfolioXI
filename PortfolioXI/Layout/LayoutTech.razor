@using System.Globalization
@inherits LayoutResponsiveBase
@inject LanguageService Loc


<MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <ObserverSize OnResize="HandleResize">
        <CascadingValue Value="IsTech">
            @if (_renderReady)
            {
                @if (!_isMobile)
                {
                    <MudDrawer @bind-Open="_open" Variant="@DrawerVariant.Responsive">
                        <MudDrawerHeader>
                            <MudText id="topSiteTitle" Typo="Typo.h6"></MudText>
                        </MudDrawerHeader>
                        <NavMenu />
                        <div class="margin-top-auto parameters">
                            <div class="language-selector-wrapper">
                                <LanguageSelector></LanguageSelector>
                            </div>
                            <MudNavMenu Class="theme-swith">
                                <MudSwitch T="bool" Value="_isDarkMode" ValueChanged="SaveThemeTech" ValueExpression="() => _isDarkMode"
                                           ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                           ThumbIconColor="Color.Dark" />
                            </MudNavMenu>
                        </div>
                         
                    </MudDrawer>
                    <button id="logoStart" @onclick="OpenDrawer">
                        <span class="iconmax iconmax-logo px24"></span>
                    </button>
                }
                else
                {
                    @if (_openBottom)
                    {
                        <MudDrawer @bind-Open="_openBottom"
                                   Class="drawer-bottom"
                                   Width="100vw"
                                   Height="auto"
                                   Anchor="Anchor.Bottom"
                                   Variant="DrawerVariant.Temporary"
                                   Elevation="2">
                            <div class="nav-header-bottom row">
                                <span class="iconmax iconmax-logo px48"></span>
                            </div>
                            <NavMenu />
                            <div class="margin-top-auto parameters">
                                <div class="language-selector-wrapper">
                                    <LanguageSelector></LanguageSelector>
                                </div>
                                <MudNavMenu Class="theme-swith">
                                    <MudSwitch T="bool" Value="_isDarkMode" ValueChanged="SaveThemeTech" ValueExpression="() => _isDarkMode"
                                               ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                               ThumbIconColor="Color.Dark" />
                                </MudNavMenu>
                            </div>
                            <button class="close-drawer-bottom" @onclick="SwithDrawerBottom">
                                <MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Large" />
                            </button>
                        </MudDrawer>
                    }
                    else
                    {
                        <button id="logoBottom" @onclick="SwithDrawerBottom">
                            <span class="iconmax iconmax-logo-menu px45"></span>
                        </button>
                    }
                }
                <MudMainContent>
                    @Body
                    @if (_isMobile)
                    {
                        <div class="bottom-for-all">
                            <NavMenu></NavMenu>
                            <div class="margin-top-auto parameters">
                                <div class="language-selector-wrapper">
                                    <LanguageSelector></LanguageSelector>
                                </div>
                                <MudNavMenu Class="theme-swith">
                                    <MudSwitch T="bool" Value="_isDarkMode" ValueChanged="SaveThemeTech" ValueExpression="() => _isDarkMode"
                                               ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                               ThumbIconColor="Color.Dark" />
                                </MudNavMenu>
                            </div>
                        </div>
                    }
                    <Spacer></Spacer>
                    <Declaration></Declaration>
                </MudMainContent>
            }
        </CascadingValue>
    </ObserverSize>
</MudLayout>

@code {
    private MudTheme _theme = new();
    public bool IsTech { get; private set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isDarkMode = await JS.InvokeAsync<bool>("themeHelper.getThemeTech");
            await JS.InvokeVoidAsync("themeHelper.applyMetaThemeTech", _isDarkMode);
        }
        catch
        {
            _isDarkMode = true; // 默认值
            await JS.InvokeVoidAsync("themeHelper.applyMetaThemeTech", _isDarkMode);
        }
    }
    protected async Task SaveThemeTech(bool value)
    {
        _isDarkMode = value;
        await JS.InvokeVoidAsync("themeHelper.saveThemeTech", value);
        await JS.InvokeVoidAsync("themeHelper.applyMetaThemeTech", value);
        StateHasChanged();
    }
}
