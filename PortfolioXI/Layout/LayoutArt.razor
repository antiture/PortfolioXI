@inherits LayoutResponsiveBase
@inject IJSRuntime JS

<MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout Class="layout-art">
    <ObserverSize OnResize="HandleResize">
        <CascadingValue Value="IsTech">
            @if (_renderReady)
            {
                @if (!_isMobile)
                {
                    <MudDrawer @bind-Open="_open" Variant="@DrawerVariant.Responsive">
                        <MudDrawerHeader Class="top-site-art">
                            <MudText id="topSiteTitleArt" Typo="Typo.h6"></MudText>
                        </MudDrawerHeader>
                        <NavMenu />
                        <MudNavMenu Style="margin-top: auto;">
                            <MudSwitch T="bool" Value="_isDarkMode" ValueChanged="SaveThemeArt" ValueExpression="() => _isDarkMode"
                                       ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                       ThumbIconColor="Color.Dark" />

                        </MudNavMenu>
                    </MudDrawer>
                    <button id="logoStartArt" @onclick="OpenDrawer">
                        <span class="iconmax iconmax-logo-art px60"></span>
                    </button>
                }
                else
                {
                    @if (_openBottom)
                    {
                        <MudDrawer @bind-Open="_openBottom" Class="drawer-bottom" Width="100vw" Height="auto" Anchor="Anchor.Bottom"
                                   Variant="DrawerVariant.Temporary" Elevation="2">
                            <div class="nav-header-bottom row">
                                <span class="iconmax iconmax-logo-art px48"></span>
                            </div>
                            <NavMenu />
                            <MudNavMenu Style="margin: 40px 10px 0px auto" Class="theme-swith">
                                <MudSwitch T="bool" Value="_isDarkMode" ValueChanged="SaveThemeArt" ValueExpression="() => _isDarkMode"
                                           ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                           ThumbIconColor="Color.Dark" />
                            </MudNavMenu>
                            <button class="close-drawer-bottom" @onclick="SwithDrawerBottom">
                                <MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Large" />
                            </button>
                        </MudDrawer>
                    }
                    else
                    {
                        <button id="logoBottom" @onclick="SwithDrawerBottom">
                            <span class="iconmax iconmax-logo-art px45"></span>
                        </button>
                    }
                }

                <MudMainContent>
                    @Body
                    @if (_isMobile)
                    {
                        <NavMenu></NavMenu>
                        <MudNavMenu Style="margin: 40px 10px 100px auto" Class="theme-swith">

                            <MudSwitch T="bool" Value="_isDarkMode" ValueChanged="SaveThemeArt" ValueExpression="() => _isDarkMode"
                                       ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                       ThumbIconColor="Color.Dark" />
                        </MudNavMenu>
                        <Spacer></Spacer>
                    }
                </MudMainContent>
            }
        </CascadingValue>
    </ObserverSize>
</MudLayout>

@code {
    private MudTheme _theme = new();
    public bool IsTech { get; private set; } = false;
    protected override void OnInitialized()
    { 

        base.OnInitialized();  
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isDarkMode = await JS.InvokeAsync<bool>("themeHelper.getThemeArt");
            await JS.InvokeVoidAsync("themeHelper.applyMetaThemeArt", _isDarkMode);
        }
        catch
        {
            _isDarkMode = false; // 默认值
            await JS.InvokeVoidAsync("themeHelper.applyMetaThemeArt", _isDarkMode);
        }
    }
    protected async Task SaveThemeArt(bool value)
    {
        _isDarkMode = value;
        await JS.InvokeVoidAsync("themeHelper.saveThemeArt", value);
        await JS.InvokeVoidAsync("themeHelper.applyMetaThemeArt", value);
        StateHasChanged();
    }

}
