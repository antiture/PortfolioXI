@inherits LayoutComponentBase
@inject IJSRuntime JS

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout Class="layout-art">
    <ObserverSize OnResize="HandleResize">
        <CascadingValue Value="IsTech">
            @if (_renderReady)
            {
                @if (!_isMobile)
                {
                    <MudDrawer @bind-Open="@_open" Variant="@DrawerVariant.Responsive">
                        <MudDrawerHeader Class="top-site-art">
                            <MudText id="topSiteTitleArt" Typo="Typo.h6"></MudText>
                        </MudDrawerHeader>
                        <NavMenu />
                        <MudNavMenu Style="margin-top: auto;">
                            <MudSwitch @bind-Value="_isDarkMode" Class="theme-swith"
                                       ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                       ThumbIconColor="Color.Dark" />
                        </MudNavMenu>
                    </MudDrawer>
                    <button id="logoStartArt" @onclick="OpenDrawer">
                        <span class="iconmax iconmax-logo-art px60"></span>
                    </button>
                }
                else
                {
                    @if (_openBottom)
                    {
                        <MudDrawer @bind-Open="_openBottom"   
                                   Width="100vw"
                                   Height="auto"
                                   Anchor="Anchor.Bottom"
                                   Variant="DrawerVariant.Temporary"
                                   Elevation="2">
                            <div class="nav-header-bottom row">
                                <span class="iconmax iconmax-logo-art px48"></span>
                            </div>
                            <NavMenu />
                            <MudNavMenu Style="margin: 40px 10px 0px auto" Class="theme-swith">
                                <MudSwitch @bind-Value="_isDarkMode"
                                           ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                           ThumbIconColor="Color.Dark" />

                            </MudNavMenu> 
                            <button class="close-drawer-bottom" @onclick="SwithDrawerBottom">
                                <MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Large"/>
                            </button>
                        </MudDrawer>
                    }
                    else
                    {
                        <button id="logoBottom" @onclick="SwithDrawerBottom">
                            <span class="iconmax iconmax-logo-art px45"></span>
                        </button>
                    }
                }
                <MudMainContent>
                    @Body
                    @if (_isMobile)
                    {
                        <NavMenu></NavMenu>
                        <MudNavMenu Style="margin: 40px 10px 100px auto" Class="theme-swith">
                            <MudSwitch @bind-Value="_isDarkMode"
                                       ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                                       ThumbIconColor="Color.Dark" />
                        </MudNavMenu>
                        <Spacer></Spacer>
                    }
                </MudMainContent>
            }
        </CascadingValue>
    </ObserverSize>
</MudLayout>

@code {
    private MudTheme _theme = new();
    private bool _isDarkMode = false;
    private bool _openBottomBacking;
    private bool _openBottom
    {
        get => _openBottomBacking;
        set
        {
            if (_openBottomBacking != value)
            {
                _openBottomBacking = value;
                _ = OnDrawerBottomChanged(value); // fire-and-forget 异步触发
            }
        }
    }
    private bool _open = true;
    private bool _isMobile;
    private bool _renderReady = false;
    public bool IsTech { get; private set; } = false;
    private void HandleResize(double width)
    {
        var newState = width < 768;
        if (newState != _isMobile || !_renderReady)
        {
            _isMobile = newState;
            _renderReady = true;
            InvokeAsync(StateHasChanged);
        }
    }

    private void SwithDrawerBottom() => _openBottom = !_openBottom;
    private async Task OnDrawerBottomChanged(bool isOpen)
    {
        if (isOpen)
            await JS.InvokeVoidAsync("document.body.style.setProperty", "overflow", "hidden");
        else
            await JS.InvokeVoidAsync("document.body.style.removeProperty", "overflow");

        StateHasChanged(); // optional, 强制刷新
    }
    private void OpenDrawer() => _open = !_open;
}
